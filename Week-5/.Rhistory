print(paste0("Hello", name,"!"))
#hello(variable)
name <- "Kashif"
print(paste0("Hello", name,"!"))
#hello(variable)
function(name){print(paste0("Hello", name,"!"))}
say_hello_to <- function(name){print(paste0("Hello", name,"!"))}
say_hello_to(ryan)
say_hello_to <- function(name){print(paste0("Hello", name,"!"))}
say_hello_to('ryan')
typeof('+')
typeof('+')
typeof(sum)
typeof(+)
typeof('+')
typeof(sum)
typeof('+')
typeof(sum)
typeof(min)
typeof('+')
typeof(sum)
typeof(min)
typeof(max)
typeof(say_hello_to())
typeof('+')
typeof(sum)
typeof(min)
typeof(max)
typeof(say_hello_to)
typeof(say_hello_to)
mean(rnorm(100)
mean(rnorm(100))
calc_sample_mean <- function(sample_size) {mean(rnorm(sample_size))}
calc_sample_mean(100)
calc_sample_mean(100)
mean(rnorm(100))
calc_sample_mean <- function(sample_size) {mean(rnorm(sample_size))}
calc_sample_meann <- function(sample_size){random_sameple <- rnorm(sample_size)sameple_mean<-mean(random_sample)return(sample_mean)}
calc_sample_mean <- function(sample_size) {mean(rnorm(sample_size))}
calc_sample_mean <- function(sample_size){random_sameple <- rnorm(sample_size)sameple_mean<-mean(random_sample)return(sample_mean)}
calc_sample_mean <- function(sample_size) {mean(rnorm(sample_size))}
calc_sample_mean <- function(sample_size){random_sameple <- rnorm(sample_size) sameple_mean<-mean(random_sample) return(sample_mean)}
calc_sample_mean <- function(sample_size) {mean(rnorm(sample_size))}
calc_sample_mean <- function(sample_size){random_sample <- rnorm(sample_size) sameple_mean<-mean(random_sample) return(sample_mean)}
calc_sample_mean <- function(sample_size) {mean(rnorm(sample_size))}
calc_sample_mean <- function(sample_size){random_sample <- rnorm(sample_size) sample_mean<-mean(random_sample) return(sample_mean)}
calc_sample_mean(1000)
mean(rnorm(1000))
calc_sample_mean(1000)
calc_sample_mean(1000)
mean(rnorm(1000))
calc_sample_mean(1000)
calc_sample_mean(1000)
mean(rnorm(1000))
calc_sample_mean(1000)
calc_sample_mean <- function(sample_size) {mean(rnorm(sample_size))}
calc_sample_mean <- function(sample_size){random_sample <- rnorm(sample_size) sample_mean<-mean(random_sample) return(sample_mean)}
calc_sample_mean <- function(sample_size) {mean(rnorm(sample_size))}
calc_sample_mean <- function(sample_size){random_sample <- rnorm(sample_size) sample_mean <- mean(random_sample) return(sample_mean)}
library(tidyverse)
#
# With vector input
sample_tibble <- tibble(sample_sizes = c(100,300,3000))
# With vector input
sample_tibble <- tibble(sample_sizes = c(100,300,3000))
sample_tibble %>% group_by(sample_sizes) %>% mutate(sample_means = calc_sample_mean(sample_sizes))
# With vector input
sample_tibble <- tibble(sample_sizes = c(100,300,3000))
sample_tibble %>% group_by(sample_sizes) %>% mutate(sample_means = calc_sample_mean(sample_sizes))
# First define the function
calc_sample_mean <- function(sample_size,our_mean=0,our_sd=1){sample <- rnorm(sample_size,mean=our_mean,sd=our_sd)}
# Call the function
# First define the function
calc_sample_mean <- function(sample_size,our_mean=0,our_sd=1){sample <- rnorm(sample_size,mean=our_mean,sd=our_sd)}
# Call the function
# First define the function
calc_sample_mean <- function(sample_size,our_mean=0,our_sd=1){sample <- rnorm(sample_size,mean=our_mean,sd=our_sd)}
# Call the function
calc_sample_mean(sample_size=10)
# First define the function
calc_sample_mean <- function(sample_size,our_mean=0,our_sd=1){sample <- rnorm(sample_size,mean=our_mean,sd=our_sd)}
# Call the function
calc_sample_mean(sample_size=10)
# First define the function
calc_sample_mean <- function(sample_size,our_mean=0,our_sd=1){sample <- rnorm(sample_size,mean=our_mean,sd=our_sd)}
# Call the function
calc_sample_mean(sample_size=10)
# First define the function
calc_sample_mean <- function(sample_size,our_mean=0,our_sd=1){sample <- rnorm(sample_size,mean=our_mean,sd=our_sd)}
# Call the function
calc_sample_mean(sample_size=10)
calc_sample_mean(10,our_sd = 2)
calc_sample_mean(10, our_mean = 6)
calc_sample_mean(10,6,2)
calc_sample_mean(10,our_sd = 2)
calc_sample_mean(10, our_mean = 6)
calc_sample_mean(10,6,2)
calc_sample_mean(10,our_sd = 2)
calc_sample_mean(10, our_mean = 6)
calc_sample_mean(10,6,2)
calc_sample_mean(10,our_sd = 2)
calc_sample_mean(10, our_mean = 6)
calc_sample_mean(10,6,2)
calc_sample_mean(10,our_sd = 2)
calc_sample_mean(10, our_mean = 6)
calc_sample_mean(10,6,2)
# set error=TRUE to see the error message in the output
calc_element(our_mean=5)
calc_sample_mean(10,our_sd = 2)
calc_sample_mean(10, our_mean = 6)
calc_sample_mean(10,6,2)
add_two <- function(x){x+2}
add_two(4)
calc_sample_mean(10,our_sd = 2)
calc_sample_mean(10, our_mean = 6)
calc_sample_mean(10,6,2)
# First define the function
calc_sample_mean <- function(sample_size,our_mean=0,our_sd=1){sample <- rnorm(sample_size,mean=our_mean,sd=our_sd)}
# Call the function
calc_sample_mean(sample_size=10)
add_two <- function(x){x+2}
add_two(4)
add_two(-34)
add_two(5.784)
z <- 1
sprintf("The value assigned to z outisde the function is %d")
z <- 1
sprintf("The value assigned to z outisde the function is %d",z)
z <- 1
sprintf("The value assigned to z outisde the function is %d",z)
foo <- function(z=2){z<-3 return(z+3)}
z <- 1
sprintf("The value assigned to z outisde the function is %d",z)
foo <- function(z=2){z<-3,return(z+3)}
z <- 1
sprintf("The value assigned to z outisde the function is %d",z)
foo <- function(z=2){z<-3 return(z+3)}
z <- 1
sprintf("The value assigned to z outisde the function is %d",z)
foo <- function(z=2){z <- 3 return(z+3)}
z <- 1
sprintf("The value assigned to z outisde the function is %d",z)
foo <- function(z=2){z <- 3 return(z+3)}
z <- 1
sprintf("The value assigned to z outisde the function is %d",z)
foo <- function(z=2){z <- 3 return(z+3)}
z <- 1
sprintf("The value assigned to z outisde the function is %d",z)
foo <- function(z=2){z <- 3 return(z+3)}
z <- 1
sprintf("The value assigned to z outisde the function is %d",z)
foo <- function(z=2){z <- 3 return(z+3)}
z <- 1
sprintf("The value assigned to z outisde the function is %d",z)
foo <- function(z=2){z <- 3 return(z+3)}
z <- 1
sprintf("The value assigned to z outisde the function is %d",z)
foo <- function(z=2){z <- 3 return(z+3)}
z <- 1
sprintf("The value assigned to z outisde the function is %d",z)
foo <- function(z = 2) {
# reassigning z
z <- 3
return(z+3)
}
foo()
z <- 1
# declare a function, notice how we pass a value of 2 for z
foo <- function(z = 2) {
# reassigning z
z <- 3
return(z+3)
}
# another reassignment of z
foo(z = 4)
calc_sample_mean <- function(sample_size) {mean(rnorm(sample_size))}
calc_sample_mean <- function(sample_size){random_sample <- rnorm(sample_size) sample_mean <- mean(random_sample) return(sample_mean)}
calc_sample_mean <- function(sample_size) {mean(rnorm(sample_size))}
calc_sample_mean <- function(sample_size) {
random_sample <- rnorm(sample_size)
sample_mean <- mean(random_sample)
return(sample_mean)
}
#return explicitly tells R what the function will return
calc_sample_mean <- function(sample_size) {mean(rnorm(sample_size))}
calc_sample_mean <- function(sample_size) {
random_sample <- rnorm(sample_size)
sample_mean <- mean(random_sample)
return(sample_mean)
}
#return explicitly tells R what the function will return
calc_sample_mean <- function(sample_size) {mean(rnorm(sample_size))}
calc_sample_mean <- function(sample_size) {
random_sample <- rnorm(sample_size)
sample_mean <- mean(random_sample)
return(sample_mean)
}
#return explicitly tells R what the function will return
calc_sample_mean(1000)
mean(rnorm(1000))
calc_sample_mean(1000)
#problem when inserting vector as it will only give sample mean of 1 not all the vector and even which sample size
calc_sample_mean(1000)
mean(rnorm(1000))
calc_sample_mean(1000)
#problem when inserting vector as it will only give sample mean of 1 not all the vector and even which sample size
# With vector input
sample_tibble <- tibble(sample_sizes = c(100,300,3000))
sample_tibble %>% group_by(sample_sizes) %>% mutate(sample_means = calc_sample_mean(sample_sizes))
knitr::opts_chunk$set(echo = TRUE)
#structure of a function function_name <- function(arguments) {body_of_the_function return (output)} argument of code is the part that keeps changing
# With vector input
library(tidyverse)
sample_tibble <- tibble(sample_sizes = c(100,300,3000))
sample_tibble %>% group_by(sample_sizes) %>% mutate(sample_means = calc_sample_mean(sample_sizes))
# With vector input
library(tidyverse)
sample_tibble <- tibble(sample_sizes = c(100,300,3000))
sample_tibble %>% group_by(sample_sizes) %>% mutate(sample_means = calc_sample_mean(sample_sizes))
knitr::opts_chunk$set(echo = TRUE)
x <- 5 #global variable
shadowing_function <- function() {x <- 10}
x <- 5 #global variable
shadowing_function <- function() {x <- 10}
x <- 5 #global variable
shadowing_function <- function() {x <- 10}
x <- 5 #global variable
shadowing_function <- function() {x <- 10}
x <- 5 #global variable
shadowing_function <- function() {x <- 10}
x <- 5 #global variable
shadowing_function <- function() {x <- 10}
x()
x <- 5 #global variable
shadowing_function <- function() {x <- 10}
function()
x <- 5 #global variable
shadowing_function <- function() {x <- 10}
shadowing_function()
x <- 5 #global variable
shadowing_function <- function() {x <- 10}
shadowing_function()
x <- 5 #global variable
shadowing_function <- function() {x <- 10}
shadowing_function(x)
x <- 5 #global variable
shadowing_function <- function() {x <- 10} #local variable
?cat
x <- 5 #global variable
shadowing_function <- function() {x <- 10} #local variable
print(x)
x <- 5 #global variable
shadowing_function <- function() {x <- 10} #local variable
print(x)
print(shadowing_function(x))
x <- 5 #global variable
shadowing_function <- function() {x <- 10} #local variable
print(x)
print(shadowing_function())
x <- 5 #global variable
shadowing_function <- function(x) {x <- 10} #local variable
x <- 5 #global variable
shadowing_function <- function(x) {x <- 10} #local variable
x <- 5 #global variable
shadowing_function <- function() {x <- 10} #local variable
return(shadowing_function())
x <- 5 #global variable
shadowing_function <- function(x) {x <- 10} #local variable
print(x)
print(shadowing_function(x))
x <- 5 #global variable
shadowing_function <- function(x) {x <- 10} #local variable
sprintf(x)
x <- 5 #global variable
shadowing_function <- function(x) {x <- 10} #local variable
sprintf("%d")
x <- 5 #global variable
shadowing_function <- function(x) {x <- 10} #local variable
?sprintf
print(shadowing_function(x))
# variables initialise inside the function will not be available outside the function
x <- 5 #global variable
shadowing_function <- function(x) {x <- 10} #local variable
shadowing_function(10)
print(shadowing_function(x))
# variables initialise inside the function will not be available outside the function
# sprintf
x <- 5 #global variable
shadowing_function <- function(x) {x <- 10} #local variable
shadowing_function(20)
print(shadowing_function(x))
# variables initialise inside the function will not be available outside the function
# sprintf
x <- 5 #global variable
shadowing_function <- function(x) {x <- 10} #local variable
shadowing_function(20)
print(shadowing_function(x))
# variables initialise inside the function will not be available outside the function
# sprintf
x <- 5 #global variable
shadowing_function <- function(x) {x <- 10} #local variable
shadowing_function(20)
print(shadowing_function(x))
# variables initialise inside the function will not be available outside the function
# sprintf
x <- 5 #global variable
shadowing_function <- function(x) {x <- 10} #local variable
shadowing_function(20)
print(shadowing_function(x))
# variables initialise inside the function will not be available outside the function
# sprintf
x <- 5 #global variable
shadowing_function <- function(x) {x <- 10} #local variable
print(x)
print(shadowing_function(x))
# variables initialise inside the function will not be available outside the function
# sprintf
x <- 5 #global variable
shadowing_function <- function(x) {x <- 10} #local variable
print(x)
shadowing_function()
print(shadowing_function(x))
# variables initialise inside the function will not be available outside the function
# sprintf
x <- 5 #global variable
shadowing_function <- function(x) {x <- 10} #local variable
print(x)
shadowing_function()
print(shadowing_function(x))
# variables initialise inside the function will not be available outside the function
# sprintf
total <- 0 # global variable that is define outside of function
add_to_total <- function(x)
total <- 0 # global variable that is define outside of function
add_to_total <- function(x){ total <- total + x}
total <- 0 # global variable that is define outside of function
add_to_total <- function(x){ total <- total + x}
add_to_total(5)
total <- 0 # global variable that is define outside of function
add_to_total <- function(x){ total <- total + x}
add_to_total(5)
total <- 0 # global variable that is define outside of function
add_to_total <- function(x){ total <- total + x}
add_to_total(5)
total()
total <- 0 # global variable that is define outside of function
add_to_total <- function(x){ total <- total + x}
add_to_total(5)
add_to_total(10)
add_to_total(15)
total()
total <- 0 # global variable that is define outside of function
add_to_total <- function(x){ total <- total + x}
add_to_total(5)
add_to_total(10)
add_to_total(15)
print(total)
total <- 0 # global variable that is define outside of function
add_to_total <- function(x){ total <- total + x}
add_to_total(5)
add_to_total(10)
add_to_total(15)
print(total)
total <- 0 # global variable that is define outside of function
add_to_total <- function(x){ total <<- total + x}
add_to_total(5)
add_to_total(10)
add_to_total(15)
print(total)
total <- 0 # global variable that is define outside of function
add_to_total <- function(x){ total <<- total + x}
add_to_total(5) #argument 1 is 5, call function with arguemnt 5
add_to_total(10) #argument 2 is 10, call function with argument 10
add_to_total(15) #argument 3 is 15, call function with argument 15
print(add_to_total)
# <<- creates a global variable inside a function
total <- 0 # global variable that is define outside of function
add_to_total <- function(x){ total <<- total + x}
add_to_total(5) #argument 1 is 5, call function with arguemnt 5
add_to_total(10) #argument 2 is 10, call function with argument 10
add_to_total(15) #argument 3 is 15, call function with argument 15
print(total)
# <<- creates a global variable inside a function
total <- 0 # global variable that is define outside of function
add_to_total <- function(x){ total <<- total + x}
add_to_total(5) #call function with argument 5 (after inputting this function does (global) total <- 5 (0+5))
print(total)
add_to_total(10) #call function with argument 10 (after inputting this function is the (global) total <- 15 (5+10) )
add_to_total(15) #argument 3 is 15, call function with argument 15
print(total) # why does this print the summation of the 3 arguments ?
# <<- creates a global variable inside a function
total <- 0 # global variable that is define outside of function
add_to_total <- function(x){ total <<- total + x}
add_to_total(5) #call function with argument 5 (after inputting this function does (global) total <- 5 (0+5))
print(total)
add_to_total(10) #call function with argument 10 (after inputting this function is the (global) total <- 15 (5+10) )
print(total)
add_to_total(15) #argument 3 is 15, call function with argument 15
print(total) # why does this print the summation of the 3 arguments ?
# <<- creates a global variable inside a function
total <- 100
add_to_total <- function(x){total <- total+x}
return(total+x)
total <- 100
add_to_total <- function(x){total <- total+x}
total <- 100
updated_total <- function(x){total <- total+x}
updated_total(20)
total <- 100
updated_total <- function(x){total <- total+x}
updated_total(20)
total <- 100
updated_total <- function(x){total <- total+x}
print(updated_total(20))
total <- 100
updated_total <- function(x){total <<- total+x}
print(updated_total(20))
total <- 100
updated_total <- function(x){total <- total+x}
print(updated_total(20))
print(total)
total <- 100 #global variable
updated_total <- function(x){total <- total+x return(total)}
total <- 100 #global variable
updated_total <- function(x){total <- total+x
return(total)}
print(updated_total(20))
print(total)
total <- 100 #global variable
updated_total <- function(x){total <- total+x return(total)}
total <- 100 #global variable
updated_total <- function(x){total <- total+x
return(total)}
print(updated_total(20))
print(total)
total <- 100 #global variable
updated_total <- function(x){total <- total+x
return(total)}
print(updated_tota(50))
total <- 100 #global variable
updated_total <- function(x){total <- total+x
return(total)}
print(updated_total(50))
total <- 100 #global variable
updated_total <- function(x){total <- total+x
return(total)}
print(updated_total(50))
?return
total <- 100 #global variable
updated_total <- function(x){total <- total+x
return(total)}
updated_total(50)
#return, returns the last output of a function atuomatically
total <- 100 #global variable
updated_total <- function(x){total <- total+x
return(total)}
print(updated_total(50))
print(total)
#return, returns the last output of a function atuomatically
total <- 100 #global variable
updated_total <- function(x){total <- total+x
return(total)}
return(total)
outer_function <- function() {x <- 5
inner_function <- print(x)} # local variable
outer_function <- function() {x <- 5
inner_function <- print(x)} # local variable
print(outer_function(10))
outer_function <- function() {x <- 5
inner_function <- print(x)} # local variable
print(outer_function(5))
outer_function <- function() {x <- 5
inner_function <- print(x)} # local variable
print(outer_function())
outer_function <- function() {x <- 5
inner_function <- print(x)} # local variable
print(outer_function())
print(inner_fucntion())
outer_function <- function() {x <- 5
inner_function <- print(x)} # local variable
print(outer_function())
print(inner_function())
outer_function <- function(x) {x <- 5
inner_function <- print(x)} # local variable
print(outer_function(x))
print(inner_function())
outer_function <- function(x) {x <- 5
inner_function <- print(x)} # local variable
print(outer_function(x))
print(inner_function(x))
outer_function <- function(x) {x <- 5
inner_function <- print(x)} # local variable
print(outer_function(x))
outer_function <- function(x) {x <- 5
inner_function <- print(x)} # local variable
print(outer_function(10))
outer_function <- function(x) {x <- 5
inner_function <- print(x)} # local variable
print(outer_function(12))
outer_function <- function(x) {x <- 5
inner_function <- function(y){print(x)}} # local variable
print(outer_function())
outer_function <- function(x) {x <- 5
inner_function <- function(y){print(x)}} # local variable
print(outer_function(5))
outer_function <- function(x) {x <- 5
inner_function <- function(y){print(x)}} # local variable
print(x)
outer_function <- function(x) {x <- 5
inner_function <- function(y){print(x)}} # local variable
print(x)
print(outer_function(5))

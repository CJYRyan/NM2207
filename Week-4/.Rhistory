library(tidyverse)
setwd("C:/Users/chenj/OneDrive/Desktop/NM2207/Week-4")
hotels <- read_csv("hotels.csv")
names(hotels)
glimpse(hotels)
select(hotels,lead_time)
# verb followed by data set > select is the action and then followed by the verb then follwoed by the column we want to go to
select(hotels,lead_time,market_segment)
arrange(hotels,lead_time)
arrange(hotels,desc(lead_time))
arrange(select(hotels,lead_time),desc(lead_time))
hotels %>%
select(lead_time) %>%
arrange(desc(lead_time))
# piping operator %>%
filter(hotels,lead_time)
hotels %>%
filter(
children >= 1
) %>%
select (hotel,children)
hotels %>%
filter(
children >= 1,
hotel == "City Hotel"
) %>%
select(hotel,children)
hotels %>%
filter(
children >= 1,
hotel == "City Hotel"
) %>%
select(hotel,children)
# condition 1 is chidren >= 1 and condition 2 is hotel == "City Hotel"
setwd("C:/Users/chenj/OneDrive/Desktop/NM2207/Week-4")
hotels %>%
slice(1:5)
hotels %>%
slice(1,3,5)
hotels %>%
distinct(hotel)
hotels %>%
mutate(little_ones= children + babies) %>%
select(hotel, little_ones,children,babies)
hotels %>%
mutate(little_ones= children + babies,average_little_ones = mean(little_ones)) %>%
select(hotel, little_ones,children,babies)
hotels %>%
mutate(little_ones = children + babies,
average_little_ones = mean(little_ones)) %>%
select(hotel, little_ones,children,babies, average_little_ones)
hotels %>% count(market_segment)
hotels %>% count(market_segment, sort = TRUE)
hotels %>% summarise(mean_adr = mean(adr))
hotels %>% group_by(hotel) %>% summarise(mean_adr=mean(adr))
hotels %>% group_by(hotel) %>% summarise(count = n)
hotels %>% group_by(hotel) %>% summarise(count = n())
hotels %>% group_by(hotel) %>% summarise(count = n())
?n()
hotels %>% summarise (min_adr = min(adr), mean_ade = mean(adr), median_adr = median(adr), max_adr = max(adr))
hotels %>% select(hotel, lead_time) %>% slice(1:5) %>% arrange(lead_time)
hotels %>% select(hotel, lead_time) %>% arrange(lead_time) %>% slice(1:5)
hotels %>% filter(hotel == "City Hotel")
hotels %>% dilter(adulte == 0, children >= 1) %>% select (adults,babies,children)
hotels %>% dilter(adulte == 0, children >= 1) %>% select(adults,babies,children)
hotels %>% filter(adulte == 0, children >= 1) %>% select(adults,babies,children)
hotels %>% filter(adults == 0, children >= 1) %>% select(adults,babies,children)
hotels %>% count(market_segment) %>% arrange(desc(n))
hotels %>% muttate(little_ones = children + babies) %>% select (children,babies,little_ones) %>% arreange(desc(little_ones))
hotels %>% muttate(little_ones = children + babies) %>% select (children,babies,little_ones) %>% arrange(desc(little_ones))
hotels %>% mutate(little_ones = children + babies) %>% select (children,babies,little_ones) %>% arrange(desc(little_ones))
hotels %>% mutate(little_ones = children + babies) %>% filter(little_ones >=1) %>% select (hotel,little_ones)
hotels %>% mutate(little_ones = children + babies) %>% filter(little_ones >=1) %>% select (hotel,little_ones)
hotels %>% mutate(little_ones = children + babies) %>% filter(little_ones >=1), hotel == "Resort Hotel") %>% select (hotel,little_ones)
hotels %>% mutate(little_ones = children + babies) %>% filter(little_ones >=1 , hotel == "Resort Hotel") %>% select (hotel,little_ones)
hotels %>% mutate(little_ones = children + babies) %>% filter(little_ones >=1 , hotel == "Resort Hotel") %>% select (hotel,little_ones)
hotels %>% mutate(little_ones = children + babies) %>% filter(little_ones >=1 , hotel == "City Hotel") %>% select (hotel,little_ones)
select(hotels,lead_time,market_segment)
# -c("column_names) to remove specific columns
knitr::opts_chunk$set(echo = TRUE)
comm_data <- read_csv(CommQuest2023_Large.csv)
comm_data <- read_csv("CommQuest2023_Large.csv")
comm_data <- read.csv("CommQuest2023_Large.csv")
comm_data <- read_csv("CommQuest2023_Large.csv")
comm_data <- read.csv("CommQuest2023_Large.csv")
comm_data <- read_csv("CommQuest2023_Large.csv")
comm_data <- read_csv("CommQuest2023_Large")
comm_data = read_csv("CommQuest2023_Large.csv")
comm_data = read_csv("CommQuest2023_Large.csv")
comm_data = read_csv("CommQuest2023_Large.csv")
comm_data = read_csv("CommQuest2023_Large.csv")
comm_data = read_csv("CommQuest2023_Large.csv")
read_csv = read.csv("CommQuest2023_Large.csv")
comm_data <- read_csv("CommQuest2023_Large")
comm_data <- read.csv("CommQuest2023_Large")
comm_data <- read_csv("CommQuest2023_Large.csv")
comm_data <- read_csv(CommQuest2023_Large.csv)
comm_data <- read_csv(CommQuest2023_Large.csv)
comm_data <- read_csv(CommQuest2023_Large.csv)
comm_data <- read_csv(CommQuest2023_Large.csv)
comm_data <- read_csv(CommQuest2023_Large.csv)
comm_data <- read.csv("CommQuest2023_Larger.csv")
select(comm_data,date,channel,message)
select(comm_data,date)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
select(comm_data,date)
select(comm_data,date,channel,message)
comm_data %>% filter(Twitter,"2023-08-02")
comm_data %>% filter(Twitter,"2023-08-02") %>% select(comm_data,Twitter)
comm_data %>% filter("Twitter"","2023-08-02") %>% select(comm_data,Twitter)
comm_data %>% filter("2023-08-02","Twitter"") %>% select(comm_data,Twitter)
comm_data %>% filter("2023-08-02","Twitter"") %>% select(comm_data,Twitter)
comm_data %>% filter("2023-08-02","Twitter") %>% select(comm_data,Twitter)
comm_data %>% filter("date","Twitter") %>% select(comm_data,Twitter)
comm_data %>% filter(date) %>% select(comm_data,Twitter)
comm_data %>% filter(date=2023-08-02) %>% select(comm_data,Twitter)
comm_data %>% filter(date==2023-08-02) %>% select(comm_data,Twitter)
comm_data %>% filter(date==2023-08-02) %>% select(Twitter)
comm_data %>% filter(date==2023-08-02) %>% select(comm-data,channel)
comm_data %>% filter(date==2023-08-02) %>% select(comm_data,channel)
comm_data %>% filter(date==2023-08-02) %>% select(channel)
comm_data %>% filter(date==2023-08-02) %>% select(channel)
comm_data %>% filter(date==2023-08-02) %>% select(Twitter)
comm_data %>% filter(date==2023-08-02, channel==Twitter) %>% select(channel)
comm_data %>% filter(date == 2023-08-02, channel == Twitter) %>% select(channel)
comm_data %>% filter(channel == Twitter) %>% select(channel)
comm_data %>% filter(channel == Twitter)
comm_data %>% filter(channel == "Twitter")
comm_data %>% filter(channel == "Twitter",date == "2023-08-02")
comm_data %>% filter(channel == "Twitter",date == "2023-08-02") %>% select(channel)
comm_data %>% filter(channel == "Twitter",date == "2023-08-02") %>% select(comm_data,channel)
comm_data %>% filter(channel == "Twitter",date == "2023-08-02")
comm_data %>% filter(channel == "Twitter",date == "2023-08-02") %>% select(message)
arrange(date)
arrange(comm_data,date)
distinct(comm_data)
distinct(comm_data)
?distinct
comm_data %>% group_by(sender) %<% count(message)
comm_data %>% group_by(sender) %>% count(message)
comm_data %>% group_by(sender) %>% count(message)
comm_data %>% count(message) %>% group_by(sender)
comm_data %>% group_by(sender) %>% count(message)
domm_data %>% group_by(channel) %>% count(message)
comm_data %>% group_by(channel) %>% count(message)
comm_data %>% filter(sentiment>0)
comm_data %>% filter(mean(sentiment)>0)
comm_data %>% filter(mean(sentiment)>0)
comm_data %>% filter(sentitment>0)
comm_data %>% filter(sentiment>0)
comm_data %>% filter(mean(sentiment)>0)
comm_data %>% filter(sentiment>0)
comm_data %>% filter(sentiment>0)%>%arrange(comm_data,sentiment)
comm_data %>% filter(sentiment>0) %>% arrange(comm_data,sentiment)
comm_data %>% filter(sentiment>0) %>% arrange(comm_data,sentiment)
comm_data %>% filter(sentiment>0) %>% select(comm_data,sender)
comm_data %>% filter(sentiment>0) %>% select(sender)
comm_data %>% filter(sentiment>0) %>% select(sender,sentiment)
comm_data %>% filter(sentiment>0) %>% arrange(sentiment) %>% select(sender,sentiment)
comm_data %>% filter(sentiment>0) %>% arrange(desc(sentiment)) %>% select(sender,sentiment)
comm_data %>% filter(mean(sentiment>0) %>% arrange(desc(sentiment)) %>% select(sender,sentiment)
comm_data %>% filter(mean(sentiment>0)) %>% arrange(desc(sentiment)) %>% select(sender,sentiment)
comm_data %>% filter(mean(sentiment)) %>% arrange(desc(sentiment)) %>% select(sender,sentiment)
comm_data %>% filter(sentiment>0) %>% arrange(desc(sentiment)) %>% select(sender,sentiment)
comm_data %>% filter(sentiment>0) %>% arrange(mean(desc(sentiment)) %>% select(sender,sentiment)
comm_data %>% filter(sentiment>0) %>% arrange(mean(desc(sentiment))) %>% select(sender,sentiment)
comm_data %>% filter(sentiment>0) %>% arrange(mean(sentiment)) %>% select(sender,sentiment)
comm_data %>% filter(sentiment>0) %>% arrange(mean(sentiment)) %>% select(sender,sentiment)
comm_data %>% filter(sentiment>0) %>% arrange(mean(sentiment)) %>% select(sender,sentiment)
comm_data %>% filter(sentiment>0) %>% arrange(mean(sentiment)) %>% select(sender,sentiment)
comm_data %>% filter(sentiment>0) %>% arrange(mean(sentiment)) %>% select(sender,sentiment)
comm_data %>% filter(sentiment>0) %>% arrange(sentiment>0) %>% select(sender,sentiment)
comm_data %>% filter(sentiment>0) %>% arrange(sentiment) %>% select(sender,sentiment)
comm_data %>% filter(sentiment>0) %>% arrange(desc(sentiment) %>% select(sender,sentiment)
comm_data %>% filter(sentiment>0) %>% arrange(desc(sentiment)) %>% select(sender,sentiment)
comm_data %>% filter(sentiment>0) %>% group_by(sender) %>% arrange(desc(sentiment)) %>% select(sender,sentiment)
comm_data %>% filter(sentiment>0) %>% group_by(sender) %>% mean(sender) %>% arrange(desc(sentiment)) %>% select(sender,sentiment)
comm_data %>% filter(sentiment>0) %>% group_by(sender) %>% arrange(desc(sentiment)) %>% select(sender,sentiment)
comm_data %>% filter(sentiment>0) %>% group_by(sender)
comm_data %>% group_by(sender) %>% filter(sentiment>0)
comm_data %>% group_by(sender) %>% filter(sentiment>0)
comm_data %>% group_by(sender)
comm_data %>% group_by("sender"")
comm_data %>% group_by("sender")
comm_data %>% group_by(sender)
comm_data
comm_data %>% group_by(sender)
comm_data %>% group_by(channel)
comm_data %>% group_by(sender) %>% select (sender)
comm_data %>% group_by(sender) %>% filter(sentiment>0)
comm_data %>% filter(sentiment>0) %>% group_by(sender)
comm_data %>% filter(sentiment>0) %>% arrange(desc(sender))
comm_data %>% filter(sentiment>0) %>% arrange(desc(sender))
comm_data %>% filter(sentiment>0) %>% group_by(sender)
comm_data %>% filter(sentiment>0) %>% group_by()
comm_data %>% filter(sentiment>0) %>% arrange(desc(sentiment)) %>% select(sender,sentiment)
comm_data %>% filter(sentiment>0) %>% group_by(sender) %>% arrange(desc(sentiment)) %>% select(sender,sentiment,1:3)
comm_data %>% filter(sentiment>0) %>% group_by(sender) %>% arrange(desc(sentiment)) %>% select(sender,sentiment)
comm_data %>% filter(sentiment>0) %>% group_by(sender) %>% arrange(desc(sentiment)) %>% select(sender,sentiment,head(3))
comm_data %>% filter(sentiment>0) %>% group_by(sender) %>% arrange(desc(sentiment)) %>% select(sender,sentiment,head(3))
comm_data %>% filter(sentiment>0) %>% group_by(sender) %>% arrange(desc(sentiment)) %>% select(sender,sentiment)
?head
comm_data %>% filter(sentiment>0) %>% group_by(sender) %>% arrange(desc(sentiment)) %>% select(sender,sentiment) %>% head(3)
?head
comm_data %>% mean(sentiment) %>% filter(sentiment>0) %>% #how do i find the average positive sentiment here ? mean(sentiment>0)
%>% arrange(desc(sentiment)) %>% select(sender,sentiment) %>% head(3)
comm_data %>% filter(sentiment>0) %>% group_by(sender)#how do i find the average positive sentiment here ? mean(sentiment>0)
%>% arrange(desc(sentiment)) %>% select(sender,sentiment) %>% head(3)
comm_data %>% filter(sentiment>0) %>% group_by(sender) %>% arrange(desc(sentiment)) %>% select(sender,sentiment) %>% head(3)
# thought process i want to filter the positive sentiment then find the average by group up the senders and then arrange in descending order then pick the top 3
#how do i find the average positive sentiment here ? mean(sentiment>0)
comm_data %>% filter(sentiment>0) %>% group_by(sender) %>% summarise(avg_sentiment = mean(sentiment_score)) %>% arrange(desc(sentiment)) %>% select(sender,sentiment) %>% head(3)
comm_data %>% filter(sentiment>0) %>% group_by(sender) %>% summarise(avg_sentiment = mean(sentiment)) %>% arrange(desc(sentiment)) %>% select(sender,sentiment) %>% head(3)
comm_data %>% filter(sentiment>0) %>% group_by(sender) %>% summarise(avg_sentiment = mean(sentiment)) %>% arrange(desc(avg_sentiment)) %>% select(sender,sentiment) %>% head(3)
comm_data %>% filter(sentiment>0) %>% group_by(sender) %>% summarise(avg_sentiment = mean(sentiment)) %>% arrange(desc(avg_sentiment)) %>% select(sender,avg_sentiment) %>% head(3)
# thought process i want to filter the positive sentiment then find the average by group up the senders and then arrange in descending order then pick the top 3
#how do i find the average positive sentiment here ? mean(sentiment>0)
comm_data %<% group_by(sentiment)
comm_data %>% group_by(sentiment)
comm_data %>% group_by(channel)
comm_data %>%v group_by(sentiment)
comm_data %>% group_by(sentiment)
comm_data %>% group_by(date)
comm_data %>% group_by(date)
comm_data %>% group_by(date)
comm_data %>% group_by(message)
comm_data %>% group_by(message)
comm_data %>% group_by(message)
comm_data %>% group_by(message)
comm_data %>% group_by(message)
comm_data %>% group_by(message)
comm_data %>% group_by(message)
comm_data %>% group_by(message)
comm_data %>% group_by(sender)
comm_data %>% group_by(date)
# thought process is that i want to group them by d
comm_data %>% group_by(date)
# thought process is that i want to group them
# avg senti score for each day
comm_data %>% group_by(date) %>% summarise(avg_sentiment=mean(sentiment)) arrange (date)
comm_data %>% group_by(date) %>% summarise(avg_sentiment=mean(sentiment)) %>% arrange (date)
# thought process is that i want to group them
# avg senti score for each day
comm_data %>% group_by(date) %>% summarise(avg_sentiment=mean(sentiment)) %>% arrange (date)
comm_data %>% group_by(date)
# thought process is that i want to group them
# avg senti score for each day
comm_data %>% filter(sentiment<0) %>% select(comm_data,sentiment)
comm_data %>% filter(sentiment<0) %>% select(sentiment)
comm_data %>% filter(sentiment<0) %>% select(messages,sentiment)
comm_data %>% filter(sentiment<0) %>% select(message ,sentiment)
commdata %>% mutate(Positive = sentiment>0, Neutral = sentiment=0, Negative = sentiment<0 )
comm_data %>% mutate(Positive = sentiment>0, Neutral = sentiment=0, Negative = sentiment<0 )
comm_data %>% mutate("Positive" = sentiment>0, "Neutral" = sentiment=0, "Negative" = sentiment<0 )
comm_data %>% mutate("Positive" = sentiment>0)
comm_data %>% mutate("Positive"=sentiment>0, "Negative"=sentiment<0)
comm_data %>% mutate("Positive"=sentiment>0, "Negative"=sentiment<0, "Neutral"=sentiment=0)
comm_data %>% mutate("Positive"=sentiment>0, "Negative"=sentiment<0, "Neutral"=sentiment==0)
%>% select (Positive,Neagtive,Neutral)
comm_data %>% mutate("Positive"=sentiment>0, "Negative"=sentiment<0, "Neutral"=sentiment==0)
%>% select(Positive,Neagtive,Neutral)
comm_data %>% mutate("Positive"=sentiment>0, "Negative"=sentiment<0, "Neutral"=sentiment==0)
%>% select("Positive")
comm_data %>% mutate("Positive"=sentiment>0, "Negative"=sentiment<0, "Neutral"=sentiment==0)
comm_data %>% mutate(sentiment_label("Positive"=sentiment>0, "Negative"=sentiment<0, "Neutral"=sentiment==0))
comm_data %>% mutate(sentiment_label="Positive"=sentiment>0, "Negative"=sentiment<0, "Neutral"=sentiment==0)
comm_data %>% mutate(sentiment_label=("Positive"=sentiment>0, "Negative"=sentiment<0, "Neutral"=sentiment==0))
comm_data %>% mutate(sentiment_label = "Positive"=sentiment>0, "Negative"=sentiment<0, "Neutral"=sentiment==0)
comm_data %>% mutate(sentiment_label  = Sentiment>0)
comm_data %>% mutate(sentiment_label  = sentiment>0)
comm_data %>% mutate(sentiment_label
#thought process is that i want to create a sentiment label where it shows positive when sentiment >0 netural when sentiment is 0 and negative when sentiment is <0
?case_when
comm_data %>% mutate(sentiment_label = case_when(sentiment>0 ~ "Positive", sentiment<0 ~ "Negative", sentiment=0 ~ "Neutral")
#thought process is that i want to create a sentiment label where it shows positive when sentiment >0 netural when sentiment is 0 and negative when sentiment is <0
?case_when
comm_data %>% mutate(sentiment_label = case_when(sentiment>0 ~ "Positive", sentiment<0 ~ "Negative", sentiment=0 ~ "Neutral")
#thought process is that i want to create a sentiment label where it shows positive when sentiment >0 netural when sentiment is 0 and negative when sentiment is <0
comm_data %>% mutate(sentiment_label = case_when(sentiment>0 ~ "Positive", sentiment<0 ~ "Negative", sentiment=0 ~ "Neutral") %>% select(sentiment_label)
#thought process is that i want to create a sentiment label where it shows positive when sentiment >0 netural when sentiment is 0 and negative when sentiment is <0
comm_data %>% mutate(sentiment_label = case_when(sentiment > 0 ~ "Positive", sentiment < 0 ~ "Negative", sentiment == 0 ~ "Neutral") %>% select(sentiment_label)
#thought process is that i want to create a sentiment label where it shows positive when sentiment >0 netural when sentiment is 0 and negative when sentiment is <0
mutate(sentiment_label = case_when(
#thought process is that i want to create a sentiment label where it shows positive when sentiment >0 netural when sentiment is 0 and negative when sentiment is <0
comm_data %>% mutate(sentiment_label = case_when(
sentiment_score > 0 ~ "Positive",
sentiment_score == 0 ~ "Neutral",
sentiment_score < 0 ~ "Negative",))
comm_data %>%
mutate(sentiment_label = case_when(
sentiment > 0 ~ "Positive",
sentiment == 0 ~ "Neutral",
sentiment < 0 ~ "Negative",
TRUE ~ "Undefined"  # Optional, for handling unexpected cases
))
#thought process is that i want to create a sentiment label where it shows positive when sentiment >0 netural when sentiment is 0 and negative when sentiment is <0
comm_data %>% mutate(sentiment_label = case_when(sentiment > 0 ~ "Positive", sentiment == 0 ~ "Neutral", sentiment <0 ~ "Negative"))
#thought process is that i want to create a sentiment label where it shows positive when sentiment >0 netural when sentiment is 0 and negative when sentiment is <0
comm_data %>% mutate(sentiment_label = case_when(sentiment > 0 ~ "Positive", sentiment == 0 ~ "Neutral", sentiment <0 ~ "Negative"))
#thought process is that i want to create a sentiment label where it shows positive when sentiment >0 netural when sentiment is 0 and negative when sentiment is <0
comm_data %>% mutate ( feelings = prod(sentiment,n(message) )
comm_data %>% mutate ( feelings = prod(sentiment,n(message)) )
comm_data %>% mutate ( feelings = prod(sentiment,n(message)) )
comm_data %>% mutate ( feelings = prod(sentiment,n(message)) )
comm_data %>% mutate ( feelings = prod(sentiment,n(message)) )
comm_data %>% mutate ( feelings = sentiment,n(message) ) %>%arrange(desc(feelings))
comm_data %>% mutate ( feelings = sentiment,nchar(message) ) %>%arrange(desc(feelings))
comm_data %>% mutate ( feelings = prod(sentiment,nchar(message)) ) %>%arrange(desc(feelings))
comm_data %>% mutate ( feelings = sentiment*nchar(message)) ) %>%arrange(desc(feelings))
comm_data %>% mutate ( feelings = sentiment*nchar(message) ) %>%arrange(desc(feelings))
comm_data %>% mutate ( feelings = sentiment*nchar(message) ) %>%arrange(desc(feelings)) %>% select(feelings)
comm_data %>% group_by(date)
comm_data %>% group_by(date) %>% summarise (highest_character=sum(nchar(message))) %>% arrange(desc(highest_character))
comm_data %>% group_by(date) %>% summarise (highest_character=sum(nchar(message))) %>% arrange(desc(highest_character)) %>% select (date)
# thought process is that i want to group all the dates tgt then find their total character then arrange them accroding to the
comm_data %>% group_by(date) %>% summarise (highest_character=sum(nchar(message))) %>% arrange(desc(highest_character))
# thought process is that i want to group all the dates tgt then find their total character then arrange them accroding to the
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
select(date,channel,message)
select(comm_data,date,channel,message)
distinct(sender)
comm_data %>%
distinct(sender)
# ?distinct it keeps unique/distinct rows from data frame. what does unique or distinct mean ?
comm_data %>% group_by(sender) %>% summarise(count(message))
comm_data %>% group_by(sender) %>% count(message)
comm_data %>% select(sender,message) %>% group_by(sender) %>% count(message)
comm_data %>% group_by(sender) %>% summarise(count=n())
comm_data %>% group_by(date) %>% summarise(avg_sentiment=mean(sentiment)) %>% arrange (date)
#comm_data %>% group_by(date) # why does this not show me group by date ?
# thought process is that i want to group them
# avg senti score for each day
comm_data %>% group_by(date) %>% summarise (highest_character=sum(nchar(message))) %>% arrange(desc(highest_character)) %>% slice (1)
# %>% select (date) if i just wanna show the date
# thought process is that i want to group all the dates tgt then find their total character then arrange them accroding to the
comm_data %>% group_by(sender) %>% count(message)
# OR
comm_data %>% group_by(sender) %>% summarise(count=n())
comm_data %>% group_by(sender) %>% count(message)
# OR
comm_data %>% group_by(sender) %>% summarise(count=n())
comm_data %>% group_by(sender) %>% count(message)
# OR
#comm_data %>% group_by(sender) %>% summarise(count=n())
comm_data %>% group_by(sender) %>% count(message)
# OR
comm_data %>% group_by(sender) %>% summarise(count=n())
comm_data <- read.csv("CommQuest2023_Larger.csv")
comm_data
#comm_data %>% group_by(sender) %>% count(message)
# OR
#comm_data %>% group_by(sender) %>% summarise(count=n())
comm_data %>% group_by(sender)
#comm_data %>% group_by(sender) %>% count(message)
# OR
#comm_data %>% group_by(sender) %>% summarise(count=n())
comm_data %>% group_by(sender) %>% select(sender)
comm_data %>% summarise(avg_sentiment=mean(sentiment)) %>% arrange (date)
comm_data %>% summarise(avg_sentiment=mean(sentiment)) %>% arrange (date)
comm_data %>% group_by(date) %>% summarise(avg_sentiment=mean(sentiment)) %>% arrange (date)
comm_data %>% group_by(date) # why does this not show me group by date ?
# thought process is that i want to group them
# avg senti score for each day
comm_data %>% group_by(sender) %>% count(sender)
comm_data %>% group_by(sender) %>% select(sender)
comm_data %>% group_by(sender) %>% count(sender)
#OR
comm_data %>% group_by(sender) %>% summarise(count=n())
comm_data %>% group_by(sender) %>% count(sender)
#OR
comm_data %>% group_by(sender) %>% summarise(count=n())
#comm_data %>% group_by(sender) %>% count(message)
comm_data %>% group_bysender
#comm_data %>% group_by(sender) %>% count(message)
comm_data %>% count()
comm_data %>% group_by(sender) %>% count()
comm_data %>% group_by(sender)
comm_data %>% group_by(sender) %>% count(sender)
#OR
comm_data %>% group_by(sender) %>% summarise(count=n())
#comm_data %>% group_by(sender) %>% count(message)
comm_data %>% count()
comm_data %>% group_by(sender) %>% count(message)
comm_data %>% count(sender)
comm_data %>% group_by(sender) %>% count(message)
comm_data %>% group_by(sender, message) %>% count()
comm_data %>% group_by(date) %>% summarise (highest_character=sum(nchar(message))) %>% arrange(desc(highest_character)) %>% slice (1)
# %>% select (date) if i just wanna show the date
# thought process is that i want to group all the dates tgt then find their total character then arrange them according to the
select(hotels)
comm_data %>% group_by(date) %>% summarise (highest_character=sum(nchar(message))) %>% arrange(desc(highest_character)) %>% slice (1)
# %>% select (date) if i just wanna show the date
# thought process is that i want to group all the dates tgt then find their total character then arrange them according to the
select(comm_data)
comm_data %>% group_by(channel) %>% count()
comm_data %>% group_by(channel) %>% count()
count(comm_data,message)
#count(message) would count
comm_data %>% group_by(channel) %>% count()
count(comm_data,channel)
#count(message) would count
comm_data %>% group_by(sender) %>% count(sender)
#OR
comm_data %>% group_by(sender) %>% count()
#comm_data %>% group_by(sender) %>% count(message)
comm_data %>% count()
comm_data %>% count(sender)
comm_data %>% group_by(sender, message) %>% count()
select(comm_data,date,channel,message) %>%
slice(1:10)
comm_data %>% mutate ( product = sentiment*nchar(message) ) %>%arrange(desc(product)) %>% select(product) %>%
slice(1:10)
comm_data <- read_csv("CommQuest2023_Larger.csv")
comm_data
comm_data <- read_csv("CommQuest2023_Larger.csv")
comm_data <- read_csv("CommQuest2023_Larger.csv")
comm_data <- read.csv("CommQuest2023_Larger.csv")
comm_data <- read.csv("CommQuest2023_Larger.csv")
comm_data <- read.csv("CommQuest2023_Larger.csv")
comm_data <- read_csv("CommQuest2023_Larger.csv")
comm_data %>% mutate ( product = sentiment*nchar(message) ) %>%arrange(desc(product)) %>%
slice(1:10)

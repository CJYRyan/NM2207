numbers <- c(7,12.5)
sum(numbers))
numbers <- c(7,12.5)
sum(numbers)
print(numbers)
numbers <- c(7,12.5,"15.7")
sum(numbers)
'numbers <- c(7,12.5,"15.7")'
sum(numbers)
numbers <- c(7,12.5,"15.7")
'sum(numbers)'
"unable to add sum due to 15.7 being a character"
print(numbers)
numbers <- c(7,12.5,"15.7")
'sum(numbers)'
"unable to add sum due to 15.7 being a character"
print(numbers)
'R will not handle the data type conversion, i would use explicit coercion to change '15.7' into a double'
numbers <- c(7,12.5,"15.7")
'sum(numbers)'
"unable to add sum due to 15.7 being a character"
print(numbers)
numbers <- as.numeric(numbers)
numbers <- c(7,12.5,"15.7")
'sum(numbers)'
"unable to add sum due to 15.7 being a character"
print(numbers)
numbers <- as.numeric(numbers)
sum(numbers)
numbers <- c(7,12.5,"15.7")
"unable to add sum due to 15.7 being a character"
print(numbers)
numbers <- as.numeric(numbers)
sum(numbers)
grades <- c(85,90.5,"75.2")
grades <- c(85,90.5,"75.2")
mean(grades)
grades <- c(85,90.5,"75.2")
grades <- as.numeric(grades)
mean(grades)
mixed_data = list(a <- c(10,20,30), b <- c("red","green","blue"), d <- c(TRUE, FALSE, TRUE))
mixed_data = list(a <- c(10,20,30), b <- c("red","green","blue"), d <- c(TRUE, FALSE, TRUE))
print(mixed_data)
mixed_data = list(a <- c(10,20,30), b <- c("red","green","blue"), d <- c(TRUE, FALSE, TRUE))
print(mixed_data)
mixed_data$c
mixed_data = list(a <- c(10,20,30), b <- c("red","green","blue"), d <- c(TRUE, FALSE, TRUE))
print(mixed_data)
mixed_data$"c"
mixed_data = list(a <- c(10,20,30), b <- c("red","green","blue"), d <- c(TRUE, FALSE, TRUE))
print(mixed_data)
named(mixed_data)
mixed_data = list(a <- c(10,20,30), b <- c("red","green","blue"), d <- c(TRUE, FALSE, TRUE))
print(mixed_data)
names(mixed_data)
mixed_data = list(X <- c(10,20,30), Y <- c("red","green","blue"), Z <- c(TRUE, FALSE, TRUE))
print(mixed_data)
names(mixed_data)
mixed_data = list("X" <- c(10,20,30), "Y" <- c("red","green","blue"), "Z" <- c(TRUE, FALSE, TRUE))
print(mixed_data)
names(mixed_data)
mixed_data = list(A=a <- c(10,20,30), B=b <- c("red","green","blue"), D=d <- c(TRUE, FALSE, TRUE))
print(mixed_data)
names(mixed_data)
mixed_data = list(A=a <- c(10,20,30), B=b <- c("red","green","blue"), D=d <- c(TRUE, FALSE, TRUE))
print(mixed_data)
mixed_data["A"]
mixed_data = list(A=a <- c(10,20,30), B=b <- c("red","green","blue"), D=d <- c(TRUE, FALSE, TRUE))
print(mixed_data)
names(mixed_data)
mean(mixed_data["A"]
mixed_data = list(A=a <- c(10,20,30), B=b <- c("red","green","blue"), D=d <- c(TRUE, FALSE, TRUE))
print(mixed_data)
names(mixed_data)
mean(mixed_data["A"])
mixed_data = list(A=a <- c(10,20,30), B=b <- c("red","green","blue"), D=d <- c(TRUE, FALSE, TRUE))
print(mixed_data)
names(mixed_data)
mixed_data["A"]
mixed_data = list(A=a <- c(10,20,30), B=b <- c("red","green","blue"), D=d <- c(TRUE, FALSE, TRUE))
print(mixed_data)
names(mixed_data)
mixed_data["A"]
mean(mixed_data["A"])
mixed_data = list(A=a <- c(10L,20L,30L), B=b <- c("red","green","blue"), D=d <- c(TRUE, FALSE, TRUE))
print(mixed_data)
names(mixed_data)
mixed_data["A"]
mean(mixed_data["A"])
print(student_info)
print(student_info)
student_info["Bob""]
print(student_info)
student_info["Bob"]
print(student_info)
student_info$Student.names
student_info$Student.names
student_info["Student.names"]
student_info$Student.names
student_info[["Student.names"]]
print(student_info)
print(student_info)
library(openintro)
knitr::opts_chunk$set(echo = TRUE)
library(openintro)
knitr::opts_chunk$set(echo = TRUE)
library(openintro)
knitr::opts_chunk$set(echo = TRUE)
library(openintro)
library(tidyverse)
x <- c (random)
set.seed(123)
set.seed(123)
x <- c(-5:5, size = 10)
set.seed(123)
x <- c(-5:5, size = 10)
print(X)
set.seed(123)
q <- c(-5:5, size = 10)
print(q)
set.seed(123)
q <- c(-5:5, size = 10)
print(q)
q[length(q)]
set.seed(123)
q <- c(-5:5)
print(q)
q[length(q)]
set.seed(123)
q <- c(-5:20,size=10)
print(q)
q[length(q)]
set.seed(123)
q <- sample(-5:20, size = 10)
print(q)
q[length(q)]
set.seed(123)
q <- sample(-5:20, size = 10)
print(q)
q[length(q)]
set.seed(123)
q <- sample(-5:20, size = 10)
print(q)
q[length(q)]
set.seed(123)
q <- sample(-5:20, size = 5)
print(q)
q[length(q)]
print(student_info)
student_info = list(Student.names="Alice,Bob,Catherine", Scores= <- c(85,92,78), Results= <- c(TRUE,TRUE,FALSE) )
student_info = list(Student.names="Alice,Bob,Catherine", Scores= c(85,92,78), Results= c(TRUE,TRUE,FALSE) )
print(student_info)
mixed_data = list(A= c(10,20,30), B= c("red","green","blue"), D= c(TRUE, FALSE, TRUE))
print(mixed_data)
names(mixed_data)
mixed_data["A"]
mean(mixed_data["A"])
mixed_data = list(A= c(10,20,30), B= c("red","green","blue"), D= c(TRUE, FALSE, TRUE))
print(mixed_data)
names(mixed_data)
mixed_data["A"]
mean(mixed_data("A"))
print(student_info)
print(student_info)
student_info["Student.names"]
print(student_info)
student_info["Student.names"]
Select(Student.names)
print(student_info)
student_info["Student.names"]
Select(Bob)
print(student_info)
student_info["Student.names"]
student_info <- student_info %>%
print(student_info)
student_info["Student.names"]
student_info <- student_info %>% select (Student.names)
ages <- c(25,42,19,36,51,29,33,28,40)
older_than_30 <- ages[ages > 30]
ages <- c(25,42,19,36,51,29,33,28,40)
older_than_30 <- ages[ages > 30]
print(ages)
ages <- c(25,42,19,36,51,29,33,28,40)
older_than_30 <- ages[ages > 30]
print(older_than_30)
ages <- c(25,42,19,36,51,29,33,28,40)
older_than_30 <- ages[ages > 30]
print(older_than_30)
words <- c("apple","banana","cherry","apple")
indices <- which(words="apple")
words <- c("apple","banana","cherry","apple")
indices <- which(words=="apple")
print indices
words <- c("apple","banana","cherry","apple")
indices <- which(words = "apple")
words <- c("apple","banana","cherry","apple")
indices <- which(words == "apple")
print indices
words <- c("apple","banana","cherry","apple")
indices <- which(words == "apple")
print(indices)
sequence <- 1:20
print(sequence)
sequence <- 1:20
print(sequence)
every_third <- sequence[seq(from = 3, to = length(sequence), by = 3)]
sequence <- 1:20
print(sequence)
every_third <- sequence[seq(from = 3, to = length(sequence), by = 3)]
print(every_third)
Range <- 1:10
Range <- 1:10
print(Range)
Range <- 1:10
print(Range)
fourth_to_eigth <- Range[4:8]
print(fourth_to_eigth)
Range <- 2:10
print(Range)
fourth_to_eigth <- Range[4:8]
print(fourth_to_eigth)
Range <- 1:10
print(Range)
fourth_to_eigth <- Range[4:8]
print(fourth_to_eigth)
mixed_data = list(A= c(10,20,30), B= c("red","green","blue"), D= c(TRUE, FALSE, TRUE))
print(mixed_data)
names(mixed_data)
mean(A)
mixed_data = list(A= c(10,20,30), B= c("red","green","blue"), D= c(TRUE, FALSE, TRUE))
print(mixed_data)
names(mixed_data)
mean(mixed_data["A"])
mixed_data = list(A= c(10,20,30), B= c("red","green","blue"), D= c(TRUE, FALSE, TRUE))
print(mixed_data)
names(mixed_data)
average <- as.numeric(mixed_data["A"])
mixed_data = list(A= c(10L,20L,30L), B= c("red","green","blue"), D= c(TRUE, FALSE, TRUE))
print(mixed_data)
names(mixed_data)
average <- as.numeric(mixed_data["A"])
mixed_data = list(A= c(10,20,30), B= c("red","green","blue"), D= c(TRUE, FALSE, TRUE))
print(mixed_data)
names(mixed_data)
mixed_data <- as.numeric(mixed_data["A"])
mixed_data = list(A= c(10,20,30), B= c("red","green","blue"), D= c(TRUE, FALSE, TRUE))
print(mixed_data)
names(mixed_data)
mixed_data["A"] <- as.numeric(mixed_data["A"])
mixed_data = list(A= c(10,20,30), B= c("red","green","blue"), D= c(TRUE, FALSE, TRUE))
print(mixed_data)
names(mixed_data)
mixed_data["A"] <- as.numeric(mixed_data["A"])
data <- c(10, NA, 15, 20)
Missing <- which(words == NA)
print (Missing)
data <- c(10, NA, 15, 20)
Missing <- which(words == "NA")
print (Missing)
data <- c(10, NA, 15, 20)
if (is.na(data[2]))
knitr::opts_chunk$set(echo = TRUE)
library(openintro)
library(tidyverse)
prices <- c(20.5,15,"25")
prices[3] <- as.numeric(prices[3])
typeof(prices[3])
print(prices[3])
prices <- c(20.5,15,"25")
prices[3] <- as.numeric(prices[3])
typeof(prices[3])
print(prices[3])
prices <- c(20.5,15,"25")
prices[3] <- as.numeric(prices[3])
typeof(prices[3])
print(prices[3])
mixed_data <- list(A= c(10,20,30), B= c("red","green","blue"), D= c(TRUE, FALSE, TRUE))
print(mixed_data)
names(mixed_data)
mean(mixed_data$A)
prices <- c(20.5,15,"25")
prices_numeric<- as.numeric(prices)
typeof(prices[3])
prices <- c(20.5,15,"25")
prices_numeric<- as.numeric(prices)
typeof(prices[3])
prices <- c(20.5,15,"25")
prices_numeric<- as.numeric(prices)
typeof(prices[3])
print(prices[3])
print(student_info)
prices <- c(20.5,15,"25")
prices_numeric <- as.numeric(prices)
typeof(prices[3])
print(prices[3])
print(student_info$Scores)
print(student_info$Scores[2])
data <- c(10, NA, 15, 20)
print(data)
data <- c(10, NA, 15, 20)
print(data[2])
daily_temperatures <- c(50,60,70,80,90,100)
print(daily_temperatures)
hot_days <- daily_temperatures[daily_temperatures>90]
print(hot_days)
fruits <- (apple, banana, pineapple, watermelon)
fruits <- (apple, banana, pineapple, watermelon)
fruits <- (apple, banana, pineapple, watermelon)
fruits <- (apple, banana, pineapple, watermelon)
fruits <- (apple, banana, pineapple, watermelon)
fruits <- c(apple, banana, pineapple, watermelon)
fruits <- c(apple, banana, pineapple, watermelon)
fruits <- c( banana, pineapple, watermelon)
fruits <- c(banana, pineapple, watermelon)
fruits <- c("apple", "banana", "watermelon", "pineapple")
long_names <- nchar(fruits) > 6
print(long_names)
fruits <- c("apple", "banana", "watermelon", "pineapple")
long_names <- nchar(fruits) > 6
print(long_names)
long_fruit_names <- fruits[long_names]
print(long_fruit_names
fruits <- c("apple", "banana", "watermelon", "pineapple")
long_names <- nchar(fruits) > 6
print(long_names)
long_fruit_names <- fruits[long_names]
print(long_fruit_names)
numbers <- c(10,12,2,1,8,9,15,25)
divisible_by_5 <- numbers %% 5 == 0
divisible_numbers <- numbers[divisible_by_5]
print(divisible_numbers)
vector1 <- c(1,2,3,4,5)
vector2 <- c(6,7,8,9,10)
comparison <- vector1 > vector2
print(comparison)
vector1 <- c(1,2,3,4,5)
vector2 <- c(5,7,8,9,10)
comparison <- vector1 > vector2
print(comparison)
vector1 <- c(1,2,3,4,5)
vector2 <- c(5,7,8,9,10)
comparison <- vector1 > vector2
print(comparison)
vector1 <- c(1,2,3,4,5)
vector2 <- c(3,7,8,9,10)
comparison <- vector1 > vector2
print(comparison)
vector1 <- c(1,2,3,4,5)
vector2 <- c(3,7,8,9,10)
comparison <- vector1 > vector2
print(comparison)
vector1 <- c(1,2,3,4,5)
vector2 <- c(3,7,8,9,10)
comparison <- vector1 > vector2
print(comparison)
vector1 <- c(1,2,3,4,5)
vector2 <- c(3,7,8,9,10)
comparison <- vector1 > vector2
print(comparison)
vector1 <- c(1,2,3,4,5)
vector2 <- c(3,7,8,9,10)
comparison <- vector1 > vector2
print(comparison)
student_info <- list(Student.names="Alice,Bob,Catherine", Scores= c(85,92,78), Results= c(TRUE,TRUE,FALSE) )
print(student_info)
prices <- c(20.5,15,"25")
prices_numeric <- as.numeric(prices)
typeof(prices[3])
print(prices[3])
daily_temperatures <- c(50,60,70,80,90,100)
print(daily_temperatures)
hot_days <- daily_temperatures[daily_temperatures>90]
total_number_of_hot_days <- n(hot_days)
daily_temperatures <- c(50,60,70,80,90,100)
print(daily_temperatures)
hot_days <- daily_temperatures[daily_temperatures>90]
total_number_of_hot_days <- n(hot_days)
daily_temperatures <- c(50,60,70,80,90,100)
print(daily_temperatures)
hot_days <- daily_temperatures[daily_temperatures>90]
total_number_of_hot_days <- sum(hot_days)
print(total_number_of_hot_days) ' printing temperature but not the number of hot days '
print(student_info)
print(student_info$Scores[2])
student_info <- list(Student.names=c("Alice",'Bob","Catherine"), Scores= c(85,92,78), Results= c(TRUE,TRUE,FALSE) )
print(student_info)
student_info <- list(Student.names= c("Alice","Bob","Catherine"), Scores= c(85,92,78), Results= c(TRUE,TRUE,FALSE) )
print(student_info)
print(student_info)
print(student_info$Scores[2])
z <- c(x, y)
student_info$Student.names == ""
x <- 1
x = 1
x
x == 2
x == 1
x <- 1:3
x
x == 1
x + 1
student_info$Student.names
student_info$Student.names == "Bob"
which(student_info$Student.names == "Bob")
print(student_info)
print(student_info$Scores[which(student_info$Student.names == "Bob")])
?is.na
daily_temperatures <- c(50,60,70,80,90,100)
print(daily_temperatures)
hot_days <- daily_temperatures[daily_temperatures>90]
total_number_of_hot_days <- sum(hot_days)
print(total_number_of_hot_days)
' printing temperature but not the number of hot days '
daily_temperatures <- c(50,60,70,80,90,100)
print(daily_temperatures)
hot_days <- daily_temperatures[daily_temperatures>90]
hot_days
10 %% 2
9 %% 4
print(student_info)
which(student_info$Student.names == "Bob")
print(student_info$Scores[which(student_info$Student.names == "Bob")])
# we are trying to automate the process and not manually finding, so bobs score is linked to the placement of where bob is at therefore
?which
?length
?is.na
# hint use is.na
data <- c(10, NA, 15, 20)
missing_element <- is.na(data)
print(missing_element)
# hint use is.na
data <- c(10, NA, 15, 20, NA)
missing_element <- is.na(data)
print(missing_element)
?length
daily_temperatures <- c(50,60,70,80,90,100)
print(daily_temperatures)
hot_days <- daily_temperatures[daily_temperatures>90]
print(length(hot_days))
# use length
daily_temperatures <- c(50,60,70,80,90,100,110)
print(daily_temperatures)
hot_days <- daily_temperatures[daily_temperatures>90]
print(length(hot_days))
# use length
?which
x <- c(T, F, F, T, F)
X
x
which(x)
data <- c(10,15.5,"20",TRUE)
print(data)
print(typeof(data[1]))
print(typeof(10L))
print(typeof(15.5))
print(typeof("20"))
print(typeof(TRUE))
data <- c(10,15.5,"20",TRUE)
print(data)
print(typeof(data[1]))
print(typeof(data[2]))
data <- c(10,15.5,"20",TRUE)
print(data)
print(typeof(data[1]))
print(typeof(data[3]))
data <- c(10,15.5,"20",TRUE)
print(data)
print(typeof(data[1]))
print(typeof(data[3]))
print(typeof(data[4]))
?$
prices <- c(20.5,15,"25")
prices_numeric <- as.numeric(prices)
typeof(prices_numeric)
print(prices_numeric)
# vector can only contain one variable type, so u can't just change one element of the variable to become numeric
prices <- c(20.5,15,"25")
prices_numeric <- as.numeric(prices)
typeof(prices_numeric[3])
print(prices_numeric)
# vector can only contain one variable type, so u can't just change one element of the variable to become numeric
x <- c(5,10,15)
y <- c("apple","banana","cherry")
z <- c(x,y)
typeof(x)
typeof(y)
typeof(z)
# z <- (x,y) also works
# An implicit coercion is an automatic conversion of values from one datatype to another
sequence <- 1:20
print(sequence)
every_third <- sequence[seq(from = 3, to = length(sequence), by = 3)]
print(every_third)
# hint use is.na
data <- c(10, NA, 15, 20, NA)
missing_element <- is.na(data[2])
print(missing_element)
# hint use is.na
data <- c(10, NA, 15, 20)
missing_element <- is.na(data[2])
print(missing_element)
vector1 <- c(1,2,3,4,11)
vector2 <- c(5,7,8,9,10)
comparison <- vector1 > vector2
print(comparison)
knitr::opts_chunk$set(echo = TRUE)
fruits <- c("apple", "banana", "watermelon", "pineapple")
long_names <- nchar(fruits) > 6
print(long_names)
#' this prints out which one is more than 6 but it doesnt print out the names '
long_fruit_names <- fruits[long_names]
print(long_fruit_names)
